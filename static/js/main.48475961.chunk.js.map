{"version":3,"sources":["components/todo-form.tsx","components/todo-item.tsx","components/todo-list.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoForm","props","inputRef","React","formState","setFormState","className","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newTodo","id","shortid","generate","text","isCompleted","handleTodoCreate","current","handleInputEnter","TodoItem","todo","onBlur","handleTodoBlur","handleTodoUpdate","onClick","handleTodoComplete","handleTodoRemove","TodoList","todos","map","App","setTodos","newTodosState","push","length","classList","add","remove","find","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48475961.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { TodoInterface, TodoFormInterface } from \"./../interfaces\";\r\n\r\n// Todo form component\r\nconst TodoForm = (props: TodoFormInterface) => {\r\n  // Ref for form input\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  // Form state\r\n  const [formState, setFormState] = React.useState(\"\");\r\n\r\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    setFormState(event.target.value);\r\n  }\r\n\r\n  function handleInputEnter(event: React.KeyboardEvent) {\r\n    if (event.key === \"Enter\") {\r\n      const newTodo: TodoInterface = {\r\n        id: shortid.generate(),\r\n        text: formState,\r\n        isCompleted: false\r\n      };\r\n\r\n      props.handleTodoCreate(newTodo);\r\n\r\n      if (inputRef && inputRef.current) {\r\n        inputRef.current.value = \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo-form\">\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        placeholder=\"Enter new todo...\"\r\n        onChange={event => handleInputChange(event)}\r\n        onKeyPress={event => handleInputEnter(event)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import * as React from \"react\";\r\nimport { TodoItemInterface } from \"./../interfaces\";\r\n\r\n// TodoItem component\r\nconst TodoItem = (props: TodoItemInterface) => {\r\n  return (\r\n    <div className=\"todo-item\">\r\n      <div className=\"todo-item-input-wrapper\">\r\n        <input\r\n          className={props.todo.isCompleted ? \"todo-item-done\" : \"\"}\r\n          value={props.todo.text}\r\n          onBlur={props.handleTodoBlur}\r\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n            props.handleTodoUpdate(event, props.todo.id)\r\n          }\r\n        />\r\n      </div>\r\n\r\n      <div className=\"options\">\r\n        <div\r\n          className=\"checkmark\"\r\n          onClick={() => props.handleTodoComplete(props.todo.id)}\r\n        >\r\n          <span className=\"todo-item-checked\">✔</span>\r\n        </div>\r\n\r\n        <div\r\n          className=\"item-remove\"\r\n          onClick={() => props.handleTodoRemove(props.todo.id)}\r\n        >\r\n          ⨯\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import * as React from \"react\";\r\nimport TodoItem from \"./todo-item\";\r\nimport { TodoListInterface } from \"./../interfaces\";\r\n\r\n// TodoList component\r\nconst TodoList = (props: TodoListInterface) => {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <ul>\r\n        {props.todos.map(todo => (\r\n          <li key={todo.id}>\r\n            <TodoItem\r\n              todo={todo}\r\n              handleTodoUpdate={props.handleTodoUpdate}\r\n              handleTodoBlur={props.handleTodoBlur}\r\n              handleTodoComplete={props.handleTodoComplete}\r\n              handleTodoRemove={props.handleTodoRemove}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import * as React from \"react\";\nimport \"./App.css\";\n\nimport TodoForm from \"./components/todo-form\";\nimport TodoList from \"./components/todo-list\";\nimport { TodoInterface } from \"./interfaces\";\n\nconst App = () => {\n  const [todos, setTodos] = React.useState<TodoInterface[]>([]);\n\n  function handleTodoCreate(todo: TodoInterface) {\n    const newTodosState: TodoInterface[] = [...todos];\n\n    newTodosState.push(todo);\n\n    setTodos(newTodosState);\n  }\n\n  function handleTodoUpdate(\n    event: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) {\n    const newTodosState: TodoInterface[] = [...todos];\n\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text =\n      event.target.value;\n\n    setTodos(newTodosState);\n  }\n\n  function handleTodoRemove(id: string) {\n    const newTodosState: TodoInterface[] = todos.filter(\n      (todo: TodoInterface) => todo.id !== id\n    );\n\n    setTodos(newTodosState);\n  }\n\n  function handleTodoComplete(id: string) {\n    const newTodosState: TodoInterface[] = [...todos];\n\n    newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted = !newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted;\n\n    setTodos(newTodosState);\n  }\n\n  function handleTodoBlur(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add(\"todo-input-error\");\n    } else {\n      event.target.classList.remove(\"todo-input-error\");\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <TodoForm todos={todos} handleTodoCreate={handleTodoCreate} />\n      <TodoList\n        todos={todos}\n        handleTodoBlur={handleTodoBlur}\n        handleTodoComplete={handleTodoComplete}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoUpdate={handleTodoUpdate}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}