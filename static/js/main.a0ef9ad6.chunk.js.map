{"version":3,"sources":["components/todo-form.tsx","components/todo-item.tsx","components/todo-list.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoForm","props","inputRef","useRef","useState","formState","setFormState","FormWrapper","FormInput","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newTodo","id","shortid","generate","text","isCompleted","handleTodoCreate","current","handleInputEnter","styled","div","input","TodoItem","ListItem","TodoItemInput","isComplete","todo","onBlur","handleTodoBlur","handleTodoUpdate","Controls","Checkmark","onClick","handleTodoComplete","ItemRemove","handleTodoRemove","li","ButtonStyles","css","button","TodoList","todos","ListWrapper","List","map","ul","AppContainer","Boolean","window","location","hostname","match","ReactDOM","render","React","setTodos","newTodosState","push","length","classList","add","remove","find","filter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0ef9ad6.chunk.js","sourcesContent":["import React, { FC, ChangeEvent, useRef, useState, KeyboardEvent } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport { TodoInterface } from \"./../interfaces\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface TodoFormInterface {\r\n  todos: TodoInterface[];\r\n  handleTodoCreate: (todo: TodoInterface) => void;\r\n}\r\n\r\nexport const TodoForm: FC<TodoFormInterface> = (props: TodoFormInterface) => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [formState, setFormState] = useState(\"\");\r\n\r\n  function handleInputChange(event: ChangeEvent<HTMLInputElement>) {\r\n    setFormState(event.target.value);\r\n  }\r\n\r\n  function handleInputEnter(event: KeyboardEvent) {\r\n    if (event.key === \"Enter\") {\r\n      const newTodo: TodoInterface = {\r\n        id: shortid.generate(),\r\n        text: formState,\r\n        isCompleted: false\r\n      };\r\n\r\n      props.handleTodoCreate(newTodo);\r\n\r\n      if (inputRef && inputRef.current) {\r\n        inputRef.current.value = \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FormWrapper>\r\n      <FormInput\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        placeholder=\"Enter new todo...\"\r\n        onChange={event => handleInputChange(event)}\r\n        onKeyPress={event => handleInputEnter(event)}\r\n      />\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nconst FormWrapper = styled.div`\r\n  margin: auto;\r\n  width: 173px;\r\n`;\r\n\r\nconst FormInput = styled.input`\r\n  background-color: #181c22;\r\n  border: none;\r\n  color: white;\r\n  padding: 2px 5px;\r\n`;\r\n","import React, { FC, ChangeEvent } from \"react\";\r\nimport { TodoInterface } from \"../interfaces\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport interface TodoItemProps {\r\n  handleTodoUpdate: (event: ChangeEvent<HTMLInputElement>, id: string) => void;\r\n  handleTodoRemove: (id: string) => void;\r\n  handleTodoComplete: (id: string) => void;\r\n  handleTodoBlur: (event: ChangeEvent<HTMLInputElement>) => void;\r\n  todo: TodoInterface;\r\n}\r\n\r\nexport const TodoItem: FC<TodoItemProps> = props => {\r\n  return (\r\n    <ListItem>\r\n      <TodoItemInput\r\n        isComplete={props.todo.isCompleted}\r\n        value={props.todo.text}\r\n        onBlur={props.handleTodoBlur}\r\n        onChange={(event: ChangeEvent<HTMLInputElement>) =>\r\n          props.handleTodoUpdate(event, props.todo.id)\r\n        }\r\n      />\r\n\r\n      <Controls>\r\n        <Checkmark onClick={() => props.handleTodoComplete(props.todo.id)}>\r\n          ✔\r\n        </Checkmark>\r\n\r\n        <ItemRemove onClick={() => props.handleTodoRemove(props.todo.id)}>\r\n          ⨯\r\n        </ItemRemove>\r\n      </Controls>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nconst ListItem = styled.li`\r\n  background-color: #181c22;\r\n  margin: 5px;\r\n  padding: 3px;\r\n  float: left;\r\n`;\r\n\r\nconst TodoItemInput = styled.input<{ isComplete: boolean }>`\r\n  background-color: #181c22;\r\n  border: none;\r\n  color: white;\r\n  text-align: center;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  ${props => props.isComplete && `text-decoration: line-through;`}\r\n`;\r\n\r\nconst Controls = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n`;\r\n\r\nconst ButtonStyles = css`\r\n  text-align: center;\r\n  user-select: none;\r\n  border: none;\r\n  opacity: 0.8;\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\n// TODO: Should be buttons\r\nconst Checkmark = styled.button`\r\n  ${ButtonStyles};\r\n  background-color: #41e17e;\r\n`;\r\n\r\nconst ItemRemove = styled.button`\r\n  ${ButtonStyles};\r\n  background-color: #e14141;\r\n`;\r\n","import React, { ChangeEvent, FC } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { TodoInterface } from \"../interfaces\";\r\nimport { TodoItem } from \"./todo-item\";\r\n\r\ninterface TodoListProps {\r\n  handleTodoUpdate: (event: ChangeEvent<HTMLInputElement>, id: string) => void;\r\n  handleTodoRemove: (id: string) => void;\r\n  handleTodoComplete: (id: string) => void;\r\n  handleTodoBlur: (event: ChangeEvent<HTMLInputElement>) => void;\r\n  todos: TodoInterface[];\r\n}\r\n\r\nexport const TodoList: FC<TodoListProps> = props => {\r\n  const {\r\n    todos,\r\n    handleTodoBlur,\r\n    handleTodoComplete,\r\n    handleTodoRemove,\r\n    handleTodoUpdate\r\n  } = props;\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <List>\r\n        {todos.map(todo => (\r\n          <TodoItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            handleTodoUpdate={handleTodoUpdate}\r\n            handleTodoBlur={handleTodoBlur}\r\n            handleTodoComplete={handleTodoComplete}\r\n            handleTodoRemove={handleTodoRemove}\r\n          />\r\n        ))}\r\n      </List>\r\n    </ListWrapper>\r\n  );\r\n};\r\n\r\nconst ListWrapper = styled.div`\r\n  margin: 0 auto;\r\n  width: 50%;\r\n  padding: 10px;\r\n`;\r\n\r\nconst List = styled.ul`\r\n  padding: 0px;\r\n  list-style: none;\r\n`;\r\n","import React, { FC, ChangeEvent } from \"react\";\nimport styled from \"styled-components\";\n\nimport { TodoForm } from \"./components/todo-form\";\nimport { TodoList } from \"./components/todo-list\";\nimport { TodoInterface } from \"./interfaces\";\n\nexport const App: FC = () => {\n  const [todos, setTodos] = React.useState<TodoInterface[]>([]);\n\n  function handleTodoCreate(todo: TodoInterface) {\n    const newTodosState: TodoInterface[] = [...todos];\n\n    newTodosState.push(todo);\n\n    setTodos(newTodosState);\n  }\n\n  function handleTodoUpdate(event: ChangeEvent<HTMLInputElement>, id: string) {\n    const newTodosState: TodoInterface[] = [...todos];\n\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text =\n      event.target.value;\n\n    setTodos(newTodosState);\n  }\n\n  function handleTodoRemove(id: string) {\n    const newTodosState: TodoInterface[] = todos.filter(\n      (todo: TodoInterface) => todo.id !== id\n    );\n\n    setTodos(newTodosState);\n  }\n\n  function handleTodoComplete(id: string) {\n    const newTodosState: TodoInterface[] = [...todos];\n\n    newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted = !newTodosState.find(\n      (todo: TodoInterface) => todo.id === id\n    )!.isCompleted;\n\n    setTodos(newTodosState);\n  }\n\n  function handleTodoBlur(event: ChangeEvent<HTMLInputElement>) {\n    if (event.target.value.length === 0) {\n      event.target.classList.add(\"todo-input-error\");\n    } else {\n      event.target.classList.remove(\"todo-input-error\");\n    }\n  }\n\n  return (\n    <AppContainer>\n      <TodoForm todos={todos} handleTodoCreate={handleTodoCreate} />\n      <TodoList\n        todos={todos}\n        handleTodoBlur={handleTodoBlur}\n        handleTodoComplete={handleTodoComplete}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoUpdate={handleTodoUpdate}\n      />\n    </AppContainer>\n  );\n};\n\nconst AppContainer = styled.div``;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}